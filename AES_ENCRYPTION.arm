// Build AES Key into x1 (128-bit) in big-endian style (MSB first)
//Encryption Key: 2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c
00101011011111111000000000010011 //X0 = X31 + 0x2B7 || ADDI
11100001010111111000000010010011 //X1 = X31 + 0xE15 || ADDI
00010110001011111000000100010011 //X2 = X31 + 0x162 || ADDI
10001010111011111000000110010011 //X3 = X31 + 0x8AE || ADDI
11010010101011111000001000010011 //X4 = X31 + 0xD2A || ADDI
01101010101111111000001010010011 //X5 = X31 + 0x6AB || ADDI
11110111000111111000001100010011 //X6 = X31 + 0xF71 || ADDI
01011000100011111000001110010011 //X7 = X31 + 0x588 || ADDI
00001001110011111000010000010011 //X8 = X31 + 0x09C || ADDI
11110100111111111000010010010011 //X9 = X31 + 0xF4F || ADDI
00000011110011111000010100010011 //X10 = X31 + 0x03C|| ADDI
00000111010011111000010110010011 //X11 = X31 + 116  || ADDI
00000000101100000100000000110011 //X0 = X0 << X11   || SLL
00000110100011111000010110010011 //X11 = X31 + 104  || ADDI
00000000101100001100000010110011 //X1 = X1 << X11   || SLL
00000101110011111000010110010011 //X11 = X31 + 92   || ADDI
00000000101100010100000100110011 //X2 = X2 << X11   || SLL
00000101000011111000010110010011 //X11 = X31 + 80   || ADDI
00000000101100011100000110110011 //X3 = X3 << X11   || SLL
00000100010011111000010110010011 //X11 = X31 + 68   || ADDI
00000000101100100100001000110011 //X4 = X4 << X11   || SLL
00000011100011111000010110010011 //X11 = X31 + 56   || ADDI
00000000101100101100001010110011 //X5 = X5 << X11   || SLL
00000010110011111000010110010011 //X11 = X31 + 44   || ADDI
00000000101100110100001100110011 //X6 = X6 << X11   || SLL
00000010000011111000010110010011 //X11 = X31 + 32   || ADDI
00000000101100111100001110110011 //X7 = X7 << X11   || SLL
00000001010011111000010110010011 //X11 = X31 + 20   || ADDI
00000000101101000100010000110011 //X8 = X8 << X11   || SLL
00000000100011111000010110010011 //X11 = X31 + 8    || ADDI
00000000101101001100010010110011 //X9 = X9 << X11   || SLL

//Add Together All of the Registers
// Funct7  rs2   rs1  funct3  rd   opcode
//XXXXXXX XXXXX XXXXX  XXX  XXXXX XXXXXXX
//ADD
//0000000 XXXXX XXXXX  000  XXXXX 0110011

00000000000000001000011000110011 //X12 = X0 + X1   || ADD
00000000110000010000011000110011 //X12 = X12 + X2  || ADD
00000000110000011000011000110011 //X12 = X12 + X3  || ADD
00000000110000100000011000110011 //X12 = X12 + X4  || ADD
00000000110000101000011000110011 //X12 = X12 + X5  || ADD
00000000110000110000011000110011 //X12 = X12 + X6  || ADD
00000000110000111000011000110011 //X12 = X12 + X7  || ADD
00000000110001000000011000110011 //X12 = X12 + X8  || ADD
00000000110001001000011000110011 //X12 = X12 + X9  || ADD
00000000110001010000011000110011 //X12 = X12 + X10 || ADD

//Generate Plaintext : 324 3f6 a88 85a 308 d31 319 8a2 e03 707 34
00110010010011111000000000010011 //X0 = X31 + 0x324 || ADDI
00111111011011111000000010010011 //X1 = X31 + 0x3F6 || ADDI
10101000100011111000000100010011 //X2 = X31 + 0xA88 || ADDI
10000101101011111000000110010011 //X3 = X31 + 0x85A || ADDI
00110000100011111000001000010011 //X4 = X31 + 0x308 || ADDI
11010011000111111000001010010011 //X5 = X31 + 0xD31 || ADDI
00110001100111111000001100010011 //X6 = X31 + 0x319 || ADDI
10001010001011111000001110010011 //X7 = X31 + 0x8A2 || ADDI
11100000001111111000010000010011 //X8 = X31 + 0xE03 || ADDI
01110000011111111000010010010011 //X9 = X31 + 0x707 || ADDI
00000011010011111000010100010011 //X10 = X31 + 0x034|| ADDI
00000111010011111000010110010011 //X11 = X31 + 116  || ADDI
00000000101100000100000000110011 //X0 = X0 << X11   || SLL
00000110100011111000010110010011 //X11 = X31 + 104  || ADDI
00000000101100001100000010110011 //X1 = X1 << X11   || SLL
00000101110011111000010110010011 //X11 = X31 + 92   || ADDI
00000000101100010100000100110011 //X2 = X2 << X11   || SLL
00000101000011111000010110010011 //X11 = X31 + 80   || ADDI
00000000101100011100000110110011 //X3 = X3 << X11   || SLL
00000100010011111000010110010011 //X11 = X31 + 68   || ADDI
00000000101100100100001000110011 //X4 = X4 << X11   || SLL
00000011100011111000010110010011 //X11 = X31 + 56   || ADDI
00000000101100101100001010110011 //X5 = X5 << X11   || SLL
00000010110011111000010110010011 //X11 = X31 + 44   || ADDI
00000000101100110100001100110011 //X6 = X6 << X11   || SLL
00000010000011111000010110010011 //X11 = X31 + 32   || ADDI
00000000101100111100001110110011 //X7 = X7 << X11   || SLL
00000001010011111000010110010011 //X11 = X31 + 20   || ADDI
00000000101101000100010000110011 //X8 = X8 << X11   || SLL
00000000100011111000010110010011 //X11 = X31 + 8    || ADDI
00000000101101001100010010110011 //X9 = X9 << X11   || SLL

//Add Together All of the Registers
// Funct7  rs2   rs1  funct3  rd   opcode
//XXXXXXX XXXXX XXXXX  XXX  XXXXX XXXXXXX
//ADD
//0000000 XXXXX XXXXX  000  XXXXX 0110011

00000000000000001000011010110011 //X13 = X0 + X1   || ADD
00000000110100010000011010110011 //X13 = X13 + X2  || ADD
00000000110100011000011010110011 //X13 = X13 + X3  || ADD
00000000110100100000011010110011 //X13 = X13 + X4  || ADD
00000000110100101000011010110011 //X13 = X13 + X5  || ADD
00000000110100110000011010110011 //X13 = X13 + X6  || ADD
00000000110100111000011010110011 //X13 = X13 + X7  || ADD
00000000110101000000011010110011 //X13 = X13 + X8  || ADD
00000000110101001000011010110011 //X13 = X13 + X9  || ADD
00000000110101010000011010110011 //X13 = X13 + X10 || ADD

//Generate RoundKeys
// Funct7  imm   rs1  funct3  rd   opcode
//XXXXXXX XXXXX XXXXX  XXX  XXXXX XXXXXXX
//keyExpandRound
//0000000 XXXXX XXXXX  001  XXXXX 1100011
//rs1=prior key

00000000000001100001000001100011 //X0 = round key 1
00000000000100000001000011100011 //X1 = round key 2
00000000001000001001000101100011 //X2 = round key 3
00000000001100010001000111100011 //X3 = round key 4
00000000010000011001001001100011 //X4 = round key 5
00000000010100100001001011100011 //X5 = round key 6
00000000011000101001001101100011 //X6 = round key 7
00000000011100110001001111100011 //X7 = round key 8
00000000100000111001010001100011 //X8 = round key 9
00000000100101000001010011100011 //X9 = round key 10
 
//Encryption Process
// Funct7  rk   state  funct3  rd   opcode
//XXXXXXX XXXXX XXXXX  XXX  XXXXX XXXXXXX
//RegRoundEnc
//0000000 XXXXX XXXXX  000  XXXXX 1100011

//Initial XOR
00000000110001101001011100110011 // X14 = X12 ^ X13 || XOR

//Begin Encryption
00000000000001110000011111100011 // X15 = X14 ^ X0 || regRoundEnc
00000000000101111000011111100011 // X15 = X15 ^ X1 || regRoundEnc
00000000001001111000011111100011 // X15 = X15 ^ X2 || regRoundEnc
00000000001101111000011111100011 // X15 = X15 ^ X3 || regRoundEnc
00000000010001111000011111100011 // X15 = X15 ^ X4 || regRoundEnc
00000000010101111000011111100011 // X15 = X15 ^ X5 || regRoundEnc
00000000011001111000011111100011 // X15 = X15 ^ X6 || regRoundEnc
00000000011101111000011111100011 // X15 = X15 ^ X7 || regRoundEnc
00000000100001111000011111100011 // X15 = X15 ^ X8 || regRoundEnc
00000100100101111000011111100011 // X15 = X15 ^ X9 || finalRoundEnc


